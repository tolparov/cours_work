private fun applyFieldFilters(item: SchemeDto, filters: List<RegistryRequest.Companion.RegistryFilter>): Boolean {
    if (filters.isEmpty()) return true

    val groupedFilters = filters.groupBy { FilterType.fromString(it.fieldName) }

    // Проверяем, что каждая группа фильтров удовлетворяется
    return groupedFilters.all { (type, filters) ->
        when (type) {
            NAME -> filters.all { item.name.contains(it.fieldValue, ignoreCase = true) }
            CURATOR -> filters.all { it.fieldValue.equals(item.curator, ignoreCase = true) }
            MANAGER -> filters.all { it.fieldValue.equals(item.manager, ignoreCase = true) }
            STATUS -> filters.all { it.fieldValue.equals(item.status, ignoreCase = true) }
            TAGS -> filters.all { filter -> item.tags?.any { it.equals(filter.fieldValue, ignoreCase = true) } ?: false }
            UPDATED_AT -> filters.all { filter ->
                item.updatedAt.toLocalDate() == LocalDate.parse(filter.fieldValue)
            }
            PARTICIPANT_FL -> filters.all { filter ->
                item.participants?.any { p ->
                    p.isFL && p.fioDr?.contains(filter.fieldValue, ignoreCase = true) == true
                } ?: false
            }
            PARTICIPANT_UL -> filters.all { filter ->
                item.participants?.any { p ->
                    !p.isFL && p.inn?.contains(filter.fieldValue) == true
                } ?: false
            }
            TRACE_IP -> filters.all { filter ->
                item.traces?.any { t ->
                    t.traceType.equals("IP", ignoreCase = true) &&
                            t.traceValue.contains(filter.fieldValue, ignoreCase = true)
                } ?: false
            }
            TRACE_IMEI -> filters.all { filter ->
                item.traces?.any { t ->
                    t.traceType.equals("IMEI", ignoreCase = true) &&
                            t.traceValue.contains(filter.fieldValue, ignoreCase = true)
                } ?: false
            }
        }
    }
}
