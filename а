package ru.sber.poirot.audit.websocket

import kotlinx.coroutines.reactor.mono
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.web.reactive.socket.*
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import ru.sber.parseJson
import ru.sber.permissions.HAS_AUDIT_READ
import ru.sber.poirot.audit.dao.Audit
import ru.sber.poirot.audit.model.AuditEvent
import ru.sber.poirot.audit.model.WsMessage
import ru.sber.toJson
import ru.sber.utils.logger
import java.time.Duration
import java.util.concurrent.atomic.AtomicLong

class AuditWebSocketHandler(
    private val auditDao: Audit
) : WebSocketHandler {

    private val log = logger()

    @PreAuthorize(HAS_AUDIT_READ)
    override fun handle(session: WebSocketSession): Mono<Void> {
        log.info("New WS connection: {}", session.id)
        val lastSeen = AtomicLong(System.currentTimeMillis())

        // Основная обработка входящих сообщений
        val receiveFlux = session.receive()
            .flatMap { msg ->
                lastSeen.set(System.currentTimeMillis())
                try {
                    val filter = msg.payloadAsText.parseJson<SubscriptionFilter>()

                    val historical = mono {
                        auditDao.filter(filter.dateFrom, filter.dateTo, filter.login)
                    }.flatMapMany { historicalEvents ->
                        if (historicalEvents.isNotEmpty()) {
                            val historicalMessage = WsMessage.data(historicalEvents).toJson()
                            session.send(Mono.just(session.textMessage(historicalMessage)))
                                .thenMany(Flux.empty<WebSocketMessage>())
                        } else {
                            Flux.empty<WebSocketMessage>()
                        }
                    }

                    val live = Flux.create<AuditEvent> { sink ->
                        BroadcastRegistry.register(session.id, filter, sink)
                    }


                    Flux.concat(
                        historical,
                        live.flatMap {  event ->
                            val msg = WsMessage.data(listOf(event)).toJson()
                            session.send(Mono.just(session.textMessage(msg)))
                        }
                    )
                } catch (e: Exception) {
                    val errorMsg = WsMessage.error("Некорректные данные: ${e.message}")
                    session.send(Mono.just(session.textMessage(errorMsg.toJson()))).then()
                }
            }.doFinally {
                log.info("Closing WS connection: {}", session.id)
                BroadcastRegistry.unregister(session.id)
            }
        // Heartbeat: только отправка ping + проверка таймаута
        val heartbeatFlux = Flux.interval(Duration.ofSeconds(180))
            .flatMap {
                val now = System.currentTimeMillis()
                if (now - lastSeen.get() >= 600_000) {
                    log.warn("Session {} did not respond to heartbeat. Closing.", session.id)
                    BroadcastRegistry.unregister(session.id)
                    session.close().subscribe()
                    Mono.empty<WebSocketMessage>()
                } else {
                    val ping = session.textMessage(WsMessage.ping().toJson())
                    session.send(Mono.just(ping))
                        .doOnError { e ->
                            log.warn("Failed to send ping to {}: {}", session.id, e.message)
                            BroadcastRegistry.unregister(session.id)
                            session.close().subscribe()
                        }
                        .subscribe()
                    Mono.just(ping)
                }
            }

        return Flux.merge(receiveFlux, heartbeatFlux).then()
    }

    fun broadcast(event: AuditEvent) {
        BroadcastRegistry.publish(event)
    }
}
